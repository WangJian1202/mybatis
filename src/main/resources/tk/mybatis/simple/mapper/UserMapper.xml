<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
    <!--mybatis二级缓存是与命名空间绑定的，也可以配置在Mapper.java 中-->
    <!--没错，在保证二级缓存开启的情况下，只需添加这个标签就可以了-->
    <!--
        默认的二级缓存都有以下效果：
        1.所有select语句会被缓存
        2.所有insert，update，delete会刷新缓存
        3.缓存会使用Least Recently Used (LRU 最近最少使用的) 算法来回收
        4.没有刷新间隔 no Flush Interval，不会以任何时间顺序刷新，
        5.缓存会存储集合或对象(无论查询方法返回什么类型的值)的1024个引用
        6.缓存会被视为read/write（可读写）的，意味着对象检索不是共享的，而且可以安全地被调用者修改
          而不干扰其他调用者或者线程所做的潜在修改
        上述属性都可以通过缓存元素来修改：
        <cache
        eviction＝"FIFO"
        flushlnterval="60000"
        size="512"
        readOnly="true" />
        这个更高级的配置创建了 一个 FIFO 缓存，并每隔 60 秒刷新一次，存储集合或对象的 512
        个引用 ，而且返回的对象被认为是只读的 ， 因此在不同线程中的调用者之间修改它们会导致冲突 。
        cache可以配置的属性如下：
        eviction （收回策略）：
        a. LRU （最近最少使用的） ： 移除最长时间不被使用的对象，这是默认值 。
        b. FIFO （先进先出〉 ： 按对象进入缓存的顺序来移除它们 。
        c. SOFT （软引用） ： 移除基于垃圾回收器状态和软引用规则的对象 。
        d. WEAK （弱引用） ： 更积极地移除基于垃圾收集器状态和弱引用规则的对象 。
        *	flushinterval （刷新间隔〉。可以被设置为任意的正的毫秒形式的时间段。默认情况不设置，即没有刷新间隔 ，缓存仅仅在调用语句时刷新。
        *	size （引用数目）。 可以被设置为任意正整数，要记住缓存的对象数目和运行环境的可用内存资源数目。默认值是 1024 。
        *	readOnly （只读）。属性可以被设置为 true 或 false 。只读的缓存会给所有调用者
        返回缓存对象的相同实例，因此这些对象不能被修改 ， 这提供了很重要的性能优势 。 可
        读写的缓存会通过序列化返回缓存对象的拷贝 ， 这种方式会慢一些，但是安全 ， 因此默
        认是 false 。
        二级缓存应用场景：
        二级缓存虽然好处很多，但并不是什么时候都可以使用 。 在以下场景中，推荐使用二级缓存。
        1.以查询为主的应用中，只有尽可能少的增、删、改操作 。
        2.绝大多数以单表操作存在时，由于很少存在互相关联的情况，因此不会出现脏数据 。
        3.可以按业务划分对表进行分组时 ， 如关联的表比较少，可以通过参照缓存进行配置。
        4.除了推荐使用的情况，如果脏读对系统没有影响，也可以考虑使用 。 在无法保证数据不出
        5.现脏读的情况下 ， 建议在业务层使用可控制的缓存代替二级缓存 。(业务中不经常用)
    -->
    <!--<cache-->
            <!--eviction="FIFO"-->
            <!--flushInterval="60000"-->
            <!--size="512"-->
            <!--readOnly="true"/>-->
    <cache/>
    <!-- <cache-ref namespace="tk.mybatis.simple.mapper.RoleMapper"/> -->
    <resultMap id="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="userRoleMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <association property="role" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/>
    </resultMap>

    <resultMap id="userRoleMapSelect" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <association property="role"
                     fetchType="lazy"
                     select="tk.mybatis.simple.mapper.RoleMapper.selectRoleById"
                     column="{id=role_id}"/>
    </resultMap>

    <!--
    <resultMap id="userRoleListMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <collection property="roleList" columnPrefix="role_" javaType="tk.mybatis.simple.model.SysRole">
            <id property="id" column="id"/>
            <result property="roleName" column="role_name"/>
            <result property="enabled" column="enabled"/>
            <result property="createBy" column="create_by"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        </collection>
    </resultMap>
     -->

    <resultMap id="userRoleListMap" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList" columnPrefix="role_"
                    resultMap="tk.mybatis.simple.mapper.RoleMapper.rolePrivilegeListMap"/>
    </resultMap>

    <resultMap id="userRoleListMapSelect" extends="userMap" type="tk.mybatis.simple.model.SysUser">
        <collection property="roleList"
                    fetchType="lazy"
                    select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
                    column="{userId=id}"/>
    </resultMap>

    <select id="selectById" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>

    <!--以下在mybatris-conf.xml中配置settings mapUnderscoreToCameCase 可以不用设置别名，自动配置-->

    <select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
	    select id, 
	    	user_name userName, 
	        user_password userPassword,
	        user_email userEmail,
	        user_info userInfo,
	        head_img headImg,
	        create_time createTime
	    from sys_user
	</select>
    <!--通过在SysRole 对象中添加User属性将查询到的userName,userEmail赋值给user字段的属性-->
    <select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
	    select 
			r.id, 
			r.role_name roleName, 
			r.enabled,
			r.create_by createBy,
			r.create_time createTime,
			u.user_name as "user.userName",
			u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{userId}
	</select>

    <select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
	    select 
			r.id, 
			r.role_name roleName, 
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
-- 		这里讲#{userId} #{enabled} 改为#{0}，#{1} 或#{param1}，#{param2}接口不加@param也可，但不建议
	    where u.id = #{userId} and r.enabled = #{enabled}
	</select>

    <select id="selectRolesByUserAndRole" resultType="tk.mybatis.simple.model.SysRole">
	    select 
			r.id, 
			r.role_name roleName, 
			r.enabled,
			r.create_by createBy,
			r.create_time createTime
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
-- 		接口参数为JavaBean类型的，需要以这种点取得方式获得
	    where u.id = #{user.id} and r.enabled = #{role.enabled}
	</select>

    <insert id="insert">
		insert into sys_user(
			user_name, user_password, user_email, 
			user_info, head_img, create_time)
		values(
			#{userName}, #{userPassword}, #{userEmail}, 
			#{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime,jdbcType=TIMESTAMP})
	</insert>
    <!--useGeneratedKeys 设置为true后，Mybatis会使用JDBC的getGeneratedKeys方法来取出数据库内部生成的主键，
    获取主键后将值赋给keyProperty配置的id属性，当设置多个属性时，使用逗号隔开，主要用于支持主键自增的数据库-->
    <insert id="insert2" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
        user_name, user_password,
        <if test="userEmail != null">
            <if test="userEmail != ''">
                user_email,
            </if>
        </if>
        user_info, head_img, create_time)
        values(
        #{userName}, #{userPassword},
        <if test="userEmail != null">
            <if test="userEmail != ''">
                #{userEmail},
            </if>
        </if>
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>
    <!--selectKey 标签的keyColumn，keyProperty 和上面usegeneratedKey含义相同，这里resultType用于设置返回值类型，mysql数据库中order设置为after，Oracle数据库中
    order的值设置为BEFORE，因为Oracle数据库需要先从序列获取值，然后将值作为主键插入到数据库中-->
    <insert id="insert3">
        insert into sys_user(
        user_name, user_password, user_email,
        user_info, head_img, create_time)
        values(
        #{userName}, #{userPassword}, #{userEmail},
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!-- Oracle 的例子，查询多个列的时候需要 keyColumn，必须指定id列，否则会抛异常 -->
    <!--支持主键自增常见的数据库配置selectKey中回写主键SQL：
    1.DB2 VALUES IDENTITY_VAL_LOCAL()
    2.SELECT LAST_INSETRT_ID()
    3.SQLSERVER SELECT IDENTITY()
    4.CLOUDSCAPE VALUES IDENTITY_VAL_LOCAL()-->
    <insert id="insertOracle">
        <selectKey keyColumn="id" resultType="long" keyProperty="id" order="BEFORE">
            SELECT SEQ_USER.nextval from dual
        </selectKey>
        insert into sys_user(
        id, user_name, user_password, user_email,
        user_info, head_img, create_time)
        values(
        #{id}, #{userName}, #{userPassword}, #{userEmail},
        #{userInfo}, #{headImg, jdbcType=BLOB}, #{createTime, jdbcType=TIMESTAMP})
    </insert>

    <update id="updateById">
		update sys_user 
		set user_name = #{userName},
			user_password = #{userPassword},
			user_email = #{userEmail},
			user_info = #{userInfo},
			head_img = #{headImg, jdbcType=BLOB},
			create_time = #{createTime, jdbcType=TIMESTAMP}
		where id = #{id}
	</update>

    <delete id="deleteById">
		delete from sys_user where id = #{id}
	</delete>
    <!--where 标签的作用：如果该标签包含元素中有返回值，就插入一个where;如果where后面字符串是以and 或 or 开头的，就干掉它们-->
    <select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
        <bind name="print" value="@tk.mybatis.util.StringUtil@print(_parameter)"/>
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        <where>
            <if test="@tk.mybatis.util.StringUtil@isNotEmpty(userName)">
                and user_name like concat('%', #{userName}, '%')
            </if>
            <if test="userEmail != '' and userEmail != null">
                and user_email = #{userEmail}
            </if>
        </where>
    </select>
    <!--set标签的作用：如果该标签中包含的元素中有返回值，就插入一个set;如果后面的字符串是以逗号结尾的，
    就将这个逗号剔除-->
    <!--where 和 set的功能都能用trim实现，并且底层都是通过TrimSqlNode实现的：
    where 变迁trim实现如下：
    <trim prefix="WHERE" prefixOverrides="AND | OR "> ...</trim> 注意这里AND 和 OR 后面都有空格，不能省略
    set 标签的trim实现:
    <trim prefix="SET" suffixOverrides="," >...</ trim>
    prefix ：当 trim 元素内包含内容时，会给内容增加 prefix 指定的前缀。
    prefixOverrides ：当 trim 元素内包含内容时，会把内容中匹配的前缀字符串去掉。
    suffix ：当 trim 元素内包含内容时，会给内容增加 suffix 指定的后缀。
    suffixOverrides ：当 trim 元素内包含内容时，会把内容中匹配的后缀字符串去掉。
    -->
    <update id="updateByIdSelective">
        <bind name="print" value="@tk.mybatis.util.StringUtil@print(_parameter)"/>
        update sys_user
        <set>
            <if test="userName != null and userName != ''">
                user_name = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                user_password = #{userPassword},
            </if>
            <if test="userEmail != null and userEmail != ''">
                user_email = #{userEmail},
            </if>
            <if test="userInfo != null and userInfo != ''">
                user_info = #{userInfo},
            </if>
            <if test="headImg != null">
                head_img = #{headImg, jdbcType=BLOB},
            </if>
            <if test="createTime != null">
                create_time = #{createTime, jdbcType=TIMESTAMP},
            </if>
            id = #{id},
        </set>
        where id = #{id}
    </update>

    <select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where 1 = 1
        <choose>
            <when test="id != null">
                and id = #{id}
            </when>
            <when test="userName != null and userName != ''">
                and user_name = #{userName}
            </when>
            <otherwise>
                limit 0
            </otherwise>
        </choose>
    </select>
    <!--传入list-->
    <select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
        select id,
        user_name userName,
        user_password userPassword,
        user_email userEmail,
        user_info userInfo,
        head_img headImg,
        create_time createTime
        from sys_user
        where id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>
    <!--批量插入对象，传入idlist-->
    <insert id="insertList" useGeneratedKeys="true" keyProperty="id">
        insert into sys_user(
        user_name, user_password,user_email,
        user_info, head_img, create_time)
        values
        <foreach collection="list" item="user" separator=",">
            (
            #{user.userName}, #{user.userPassword},#{user.userEmail},
            #{user.userInfo}, #{user.headImg, jdbcType=BLOB}, #{user.createTime, jdbcType=TIMESTAMP})
        </foreach>
    </insert>

    <update id="updateByMap">
        update sys_user
        set
        <foreach collection="_parameter" item="val" index="key" separator=",">
            ${key} = #{val}
        </foreach>
        where id = #{id}
    </update>

    <select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
		select 
		   	u.id, 
		   	u.user_name userName, 
		    u.user_password userPassword,
		    u.user_email userEmail,
		    u.user_info userInfo,
		    u.head_img headImg,
		    u.create_time createTime,
			r.id "role.id", 
			r.role_name "role.roleName", 
			r.enabled "role.enabled",
			r.create_by "role.createBy",
			r.create_time "role.createTime"
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		where u.id = #{id}
	</select>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			r.id role_id,
			r.role_name role_role_name, 
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
	    where u.id = #{id}
	</select>

    <select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
			ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
	    where u.id = #{id}
	</select>

    <select id="selectAllUserAndRoles" resultMap="userRoleListMap">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time,
	        r.id role_id,
			r.role_name role_role_name, 
			r.enabled role_enabled,
			r.create_by role_create_by,
			r.create_time role_create_time,
			p.id role_privilege_id,
			p.privilege_name role_privilege_privilege_name,
			p.privilege_url role_privilege_privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id = ur.user_id
		inner join sys_role r on ur.role_id = r.id
		inner join sys_role_privilege rp on rp.role_id = r.id
		inner join sys_privilege p on p.id = rp.privilege_id
	</select>

    <select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
	    select 
	    	u.id, 
	    	u.user_name, 
	        u.user_password,
	        u.user_email,
	        u.user_info,
	        u.head_img,
	        u.create_time
		from sys_user u
		where u.id = #{id}
	</select>

    <select id="selectUserById" statementType="CALLABLE" useCache="false">
	    {call select_user_by_id(
	    	#{id, mode=IN}, 
	    	#{userName, mode=OUT, jdbcType=VARCHAR},
	    	#{userPassword, mode=OUT, jdbcType=VARCHAR},
	    	#{userEmail, mode=OUT, jdbcType=VARCHAR},
	    	#{userInfo, mode=OUT, jdbcType=VARCHAR},
	    	#{headImg, mode=OUT, jdbcType=BLOB, javaType=_byte[]},
	    	#{createTime, mode=OUT, jdbcType=TIMESTAMP}
	    )}
	</select>

    <select id="selectUserPage" statementType="CALLABLE" useCache="false" resultMap="userMap">
	    {call select_user_page(
	    	#{userName, mode=IN},
	    	#{offset, mode=IN},
	    	#{limit, mode=IN},
	    	#{total, mode=OUT, jdbcType=BIGINT}
	    )}
	</select>

    <insert id="insertUserAndRoles" statementType="CALLABLE">
	    {call insert_user_and_roles(
	    	#{user.id, mode=OUT, jdbcType=BIGINT}, 
	    	#{user.userName, mode=IN},
	    	#{user.userPassword, mode=IN},
	    	#{user.userEmail, mode=IN},
	    	#{user.userInfo, mode=IN},
	    	#{user.headImg, mode=IN, jdbcType=BLOB},
	    	#{user.createTime, mode=OUT, jdbcType=TIMESTAMP},
	    	#{roleIds, mode=IN}
	    )}
	</insert>

    <delete id="deleteUserById" statementType="CALLABLE">
	    {call delete_user_by_id(#{id, mode=IN})}
	</delete>
</mapper>